// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_pkgrcpp_RCPPEXPORTS_H_GEN_
#define RCPP_pkgrcpp_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace pkgrcpp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("pkgrcpp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("pkgrcpp", "_pkgrcpp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in pkgrcpp");
            }
        }
    }

    inline double add_cpp(double x, double y) {
        typedef SEXP(*Ptr_add_cpp)(SEXP,SEXP);
        static Ptr_add_cpp p_add_cpp = NULL;
        if (p_add_cpp == NULL) {
            validateSignature("double(*add_cpp)(double,double)");
            p_add_cpp = (Ptr_add_cpp)R_GetCCallable("pkgrcpp", "_pkgrcpp_add_cpp");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_add_cpp(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(y)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double approxPi(const int N) {
        typedef SEXP(*Ptr_approxPi)(SEXP);
        static Ptr_approxPi p_approxPi = NULL;
        if (p_approxPi == NULL) {
            validateSignature("double(*approxPi)(const int)");
            p_approxPi = (Ptr_approxPi)R_GetCCallable("pkgrcpp", "_pkgrcpp_approxPi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_approxPi(Shield<SEXP>(Rcpp::wrap(N)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double approx_pi(const int N) {
        typedef SEXP(*Ptr_approx_pi)(SEXP);
        static Ptr_approx_pi p_approx_pi = NULL;
        if (p_approx_pi == NULL) {
            validateSignature("double(*approx_pi)(const int)");
            p_approx_pi = (Ptr_approx_pi)R_GetCCallable("pkgrcpp", "_pkgrcpp_approx_pi");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_approx_pi(Shield<SEXP>(Rcpp::wrap(N)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double sumC(NumericVector x) {
        typedef SEXP(*Ptr_sumC)(SEXP);
        static Ptr_sumC p_sumC = NULL;
        if (p_sumC == NULL) {
            validateSignature("double(*sumC)(NumericVector)");
            p_sumC = (Ptr_sumC)R_GetCCallable("pkgrcpp", "_pkgrcpp_sumC");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sumC(Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

}

#endif // RCPP_pkgrcpp_RCPPEXPORTS_H_GEN_
